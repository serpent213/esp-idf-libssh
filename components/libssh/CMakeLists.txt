# This component demonstrates how to add an existing third-party library as a component
# to ESP-IDF build system.
#
# Since we are wrapping the library inside a component,
# the component has to be registered first:
idf_component_register(PRIV_REQUIRES lwip mbedtls)

# To build a third-party library, ExternalProject CMake module can be used.
# ExternalProject offers many features which are impossible to demonstrate
# in a single example. Please refer to its documentation for more info:
#   https://cmake.org/cmake/help/latest/module/ExternalProject.html
include(ExternalProject)

# Define the location where libssh will be installed:
set(LIBSSH_INSTALL_DIR ${CMAKE_CURRENT_BINARY_DIR}/libssh_install)

# This function downloads the project, calls CMake to configure it,
# builds the project and installs it to the specified location:
cmake_policy(SET CMP0135 NEW)
externalproject_add(libssh_proj
    # Download the source code of the third party project from the following URL.
    # URL https://www.libssh.org/files/0.11/libssh-0.11.0.tar.xz
    # URL_HASH SHA256=860e814579e7606f3fc3db98c5807bef2ab60f793ec871d81bcd23acdcdd3e91
    # (Downloading is not the only option; the library can also be located in your source tree.
    #  Consult ExternalProject_Add function documentation for other options.)
    GIT_REPOSITORY https://github.com/serpent213/libssh.git
    # GIT_TAG 7f3417c2e0f2c5026f85d00cf01ac35126c460e1

    # Specify arguments to be passed when running CMake for this subproject.
    # Note that ExternalProject_Add also works with non-CMake projects, so this
    # is just an example.
    CMAKE_ARGS
        # Use the same CMake toolchain file as for the main project.
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DWITH_GSSAPI:BOOL=OFF
        -DWITH_ZLIB:BOOL=OFF
        -DWITH_GCRYPT:BOOL=OFF
        -DWITH_MBEDTLS:BOOL=ON
        # -DMBEDTLS_INCLUDE_DIR="${HOME}/esp/esp-idf/components/mbedtls/mbedtls/include"
        # -DMBEDTLS_LIBRARIES="${HOME}/esp/esp-idf/components/mbedtls/mbedtls/lib"
        -DWITH_PCAP:BOOL=OFF
        -DBUILD_SHARED_LIBS:BOOL=OFF
        # -DBUILD_STATIC_LIB:BOOL=ON
        -DWITH_EXAMPLES:BOOL=OFF
        -DWITH_INSECURE_NONE:BOOL=ON
        -DWITH_EXEC:BOOL=OFF
        # Pass the install directory to the subproject.
        -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>

    # These options are set so that Ninja immediately outputs
    # the subproject build to the terminal. Otherwise it looks like the
    # build process "hangs" while the subproject is being built.
    USES_TERMINAL_DOWNLOAD TRUE
    USES_TERMINAL_CONFIGURE TRUE
    USES_TERMINAL_BUILD TRUE

    # Specify the installation directory for the subproject
    INSTALL_DIR ${LIBSSH_INSTALL_DIR}
    # Let CMake know that the library is generated by the subproject build step.
    BUILD_BYPRODUCTS "${LIBSSH_INSTALL_DIR}/lib/libssh.a"
)

# Now that the subproject build is set up, we need to consume the results
# of the build: the header file and the static library.
# To do this, define an imported CMake library:
add_prebuilt_library(libssh_lib "${LIBSSH_INSTALL_DIR}/lib/libssh.a"
                     PRIV_REQUIRES lwip mbedtls)
target_include_directories(libssh_lib INTERFACE "${LIBSSH_INSTALL_DIR}/include")
add_dependencies(libssh_lib libssh_proj)

# Link the imported library to the current component.
target_link_libraries(${COMPONENT_LIB} INTERFACE libssh_lib)

# To use libssh in another component, add 'libssh' (the name of this component)
# to PRIV_REQUIRES or REQUIRES list its idf_component_register call.
# See ../../main/CMakeLists.txt for an example.
